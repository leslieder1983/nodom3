{"code":"import { NCache } from \"./cache\";\r\nimport { Compiler } from \"./compiler\";\r\nimport { CssManager } from \"./cssmanager\";\r\nimport { Model } from \"./model\";\r\nimport { ModuleFactory } from \"./modulefactory\";\r\nimport { ObjectManager } from \"./objectmanager\";\r\nimport { Renderer } from \"./renderer\";\r\nimport { Util } from \"./util\";\r\nimport { DiffTool } from \"./difftool\";\r\nimport { ModelManager } from \"./modelmanager\";\r\n/**\r\n * 模块类\r\n * 模块方法说明：模版内使用的方法，包括事件，都直接在模块内定义\r\n *      方法this：指向module实例\r\n *      事件参数: model(当前按钮对应model),dom(事件对应虚拟dom),eventObj(事件对象),e(实际触发的html event)\r\n *      表达式方法：参数按照表达式方式给定即可\r\n */\r\nexport class Module {\r\n    /**\r\n     * 构造器\r\n     */\r\n    constructor() {\r\n        /**\r\n         * 子模块id数组\r\n         */\r\n        this.children = [];\r\n        /**\r\n         * 后置渲染序列\r\n         */\r\n        this.preRenderOps = [];\r\n        /**\r\n         * 后置渲染序列\r\n         */\r\n        this.postRenderOps = [];\r\n        /**\r\n         * 用于保存每个key对应的html node\r\n         */\r\n        this.keyNodeMap = new Map();\r\n        this.id = Util.genId();\r\n        this.objectManager = new ObjectManager(this);\r\n        this.changedModelMap = new Map();\r\n        //加入模块工厂\r\n        ModuleFactory.add(this);\r\n    }\r\n    /**\r\n     * 初始化\r\n     */\r\n    init() {\r\n        // 设置状态为初始化\r\n        this.state = 1;\r\n        //初始化model\r\n        this.model = new Model(this.data() || {}, this);\r\n        //注册子模块\r\n        if (this.modules && Array.isArray(this.modules)) {\r\n            for (let cls of this.modules) {\r\n                ModuleFactory.addClass(cls);\r\n            }\r\n            delete this.modules;\r\n        }\r\n    }\r\n    /**\r\n     * 模版串方法，使用时重载\r\n     * @param props     props对象，在模版容器dom中进行配置，从父模块传入\r\n     * @returns         模版串\r\n     */\r\n    template(props) {\r\n        return null;\r\n    }\r\n    /**\r\n     * 数据方法，使用时重载\r\n     * @returns      model数据\r\n     */\r\n    data() {\r\n        return {};\r\n    }\r\n    /**\r\n     * 模型渲染\r\n     */\r\n    render() {\r\n        this.dontAddToRender = true;\r\n        //编译\r\n        if (!this.originTree) {\r\n            this.compile();\r\n        }\r\n        //不存在，不渲染\r\n        if (!this.originTree) {\r\n            return;\r\n        }\r\n        //执行前置方法\r\n        this.doRenderOps(0);\r\n        this.doModuleEvent('onBeforeRender');\r\n        if (!this.renderTree) {\r\n            this.doFirstRender();\r\n        }\r\n        else { //增量渲染\r\n            //执行每次渲染前事件\r\n            if (this.model) {\r\n                let oldTree = this.renderTree;\r\n                this.renderTree = Renderer.renderDom(this, this.originTree, this.model);\r\n                this.doModuleEvent('onBeforeRenderToHtml');\r\n                let changeDoms = [];\r\n                // 比较节点\r\n                DiffTool.compare(this.renderTree, oldTree, changeDoms);\r\n                //执行更改\r\n                if (changeDoms.length > 0) {\r\n                    Renderer.handleChangedDoms(this, changeDoms);\r\n                }\r\n            }\r\n        }\r\n        //设置已渲染状态\r\n        this.state = 2;\r\n        //执行后置方法\r\n        this.doRenderOps(1);\r\n        //执行每次渲染后事件\r\n        this.doModuleEvent('onRender');\r\n        this.changedModelMap.clear();\r\n        this.dontAddToRender = false;\r\n    }\r\n    /**\r\n     * 执行首次渲染\r\n     * @param root \t根虚拟dom\r\n     */\r\n    doFirstRender() {\r\n        this.doModuleEvent('onBeforeFirstRender');\r\n        //渲染树\r\n        this.renderTree = Renderer.renderDom(this, this.originTree, this.model);\r\n        this.doModuleEvent('onBeforeFirstRenderToHTML');\r\n        //渲染为html element\r\n        let el = Renderer.renderToHtml(this, this.renderTree, null, true);\r\n        if (this.replaceContainer) { //替换\r\n            ['style', 'class'].forEach(item => {\r\n                let c = this.container.getAttribute(item);\r\n                if (!c) {\r\n                    return;\r\n                }\r\n                c = c.trim();\r\n                let c1 = el.getAttribute(item) || '';\r\n                if (item === 'style') {\r\n                    c += (c.endsWith(';') ? '' : ';') + c1;\r\n                }\r\n                else {\r\n                    c += ' ' + c1;\r\n                }\r\n                el.setAttribute(item, c);\r\n            });\r\n            Util.replaceNode(this.container, el);\r\n        }\r\n        else {\r\n            //清空子元素\r\n            Util.empty(this.container);\r\n            this.container.appendChild(el);\r\n        }\r\n        //执行首次渲染后事件\r\n        this.doModuleEvent('onFirstRender');\r\n    }\r\n    /**\r\n     * 添加子模块\r\n     * @param module    模块id或模块\r\n     */\r\n    addChild(module) {\r\n        let mid;\r\n        if (typeof module === 'number') {\r\n            mid = module;\r\n            module = ModuleFactory.get(mid);\r\n        }\r\n        else {\r\n            mid = module.id;\r\n        }\r\n        if (!this.children.includes(mid)) {\r\n            this.children.push(mid);\r\n            module.parentId = this.id;\r\n        }\r\n    }\r\n    /**\r\n     * 激活模块(添加到渲染器)\r\n     */\r\n    active() {\r\n        Renderer.add(this);\r\n        for (let id of this.children) {\r\n            let m = ModuleFactory.get(id);\r\n            if (m) {\r\n                m.active();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 取消激活\r\n     */\r\n    unactive() {\r\n        if (ModuleFactory.getMain() === this) {\r\n            return;\r\n        }\r\n        //设置状态\r\n        this.state = 1;\r\n        //删除容器\r\n        delete this.container;\r\n        //删除渲染树\r\n        delete this.renderTree;\r\n        // 清理dom key map\r\n        this.keyNodeMap.clear();\r\n        //清理缓存\r\n        this.clearCache();\r\n        //处理子模块\r\n        for (let id of this.children) {\r\n            let m = ModuleFactory.get(id);\r\n            if (m) {\r\n                m.unactive();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 模块销毁\r\n     */\r\n    destroy() {\r\n        if (Util.isArray(this.children)) {\r\n            this.children.forEach((item) => {\r\n                let m = ModuleFactory.get(item);\r\n                if (m) {\r\n                    m.destroy();\r\n                }\r\n            });\r\n        }\r\n        this.clearCache(true);\r\n        //从工厂释放\r\n        ModuleFactory.remove(this.id);\r\n    }\r\n    /**\r\n     * 获取父模块\r\n     * @returns     父模块\r\n     */\r\n    getParent() {\r\n        if (!this.parentId) {\r\n            return;\r\n        }\r\n        return ModuleFactory.get(this.parentId);\r\n    }\r\n    /**\r\n     * 执行模块事件\r\n     * @param eventName \t事件名\r\n     */\r\n    doModuleEvent(eventName) {\r\n        this.invokeMethod(eventName, this.model);\r\n    }\r\n    /**\r\n     * 获取模块方法\r\n     * @param name  方法名\r\n     * @returns     方法\r\n     */\r\n    getMethod(name) {\r\n        return this[name];\r\n    }\r\n    /**\r\n     * 设置渲染容器\r\n     * @param el        容器\r\n     * @param replace   渲染时是否直接替换container\r\n     */\r\n    setContainer(el, replace) {\r\n        this.container = el;\r\n        this.replaceContainer = replace;\r\n    }\r\n    /**\r\n     * 调用方法\r\n     * @param methodName    方法名\r\n     */\r\n    invokeMethod(methodName, arg1, arg2, arg3) {\r\n        let foo = this[methodName];\r\n        if (foo && typeof foo === 'function') {\r\n            let args = [];\r\n            for (let i = 1; i < arguments.length; i++) {\r\n                args.push(arguments[i]);\r\n            }\r\n            return foo.apply(this, args);\r\n        }\r\n    }\r\n    /**\r\n     * 添加渲染方法\r\n     * @param foo   方法函数\r\n     * @param flag  标志 0:渲染前执行 1:渲染后执行\r\n     * @param args  参数\r\n     * @param once  是否只执行一次，如果为true，则执行后删除\r\n     */\r\n    addRenderOps(foo, flag, args, once) {\r\n        if (typeof foo !== 'function') {\r\n            return;\r\n        }\r\n        let arr = flag === 0 ? this.preRenderOps : this.postRenderOps;\r\n        arr.push({\r\n            foo: foo,\r\n            args: args,\r\n            once: once\r\n        });\r\n    }\r\n    /**\r\n     * 执行渲染方法\r\n     * @param flag 类型 0:前置 1:后置\r\n     */\r\n    doRenderOps(flag) {\r\n        let arr = flag === 0 ? this.preRenderOps : this.postRenderOps;\r\n        if (arr) {\r\n            for (let i = 0; i < arr.length; i++) {\r\n                let o = arr[i];\r\n                o.foo.apply(this, o.args);\r\n                // 执行后删除\r\n                if (o.once) {\r\n                    arr.splice(i--, 1);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 设置props\r\n     * @param props     属性值\r\n     */\r\n    setProps(props) {\r\n        let change = false;\r\n        //保留数据\r\n        let dataObj = props.$data;\r\n        //属性对比不对data进行对比，删除数据属性\r\n        delete props.$data;\r\n        if (!this.props) {\r\n            change = true;\r\n        }\r\n        else {\r\n            const keys = Object.getOwnPropertyNames(props);\r\n            let len1 = keys.length;\r\n            const keys1 = this.props ? Object.getOwnPropertyNames(this.props) : [];\r\n            let len2 = keys1.length;\r\n            if (len1 !== len2) {\r\n                change = true;\r\n            }\r\n            else {\r\n                for (let k of keys) {\r\n                    // object 默认改变\r\n                    if (props[k] !== this.props[k] || typeof (props[k]) === 'object') {\r\n                        change = true;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //props数据复制到模块model\r\n        if (dataObj) {\r\n            for (let d in dataObj) {\r\n                let o = dataObj[d];\r\n                //如果为对象，需要绑定到模块\r\n                if (typeof o === 'object') {\r\n                    ModelManager.bindToModule(o, this);\r\n                    this.model[d] = o;\r\n                }\r\n                else if (!this.props || this.model[d] === undefined) { //非对象，值不存在，或第一次，避免覆盖模块修改的数据\r\n                    this.model[d] = o;\r\n                }\r\n            }\r\n        }\r\n        this.props = props;\r\n        if (change) { //有改变，进行编译并激活\r\n            this.compile();\r\n            this.active();\r\n        }\r\n    }\r\n    /**\r\n     * 编译\r\n     */\r\n    compile() {\r\n        //清除缓存\r\n        this.clearCache();\r\n        const str = this.template(this.props);\r\n        if (str) {\r\n            this.originTree = new Compiler(this).compile(str);\r\n        }\r\n    }\r\n    /**\r\n     * 清理缓存\r\n     * @param force 强力清除\r\n     */\r\n    clearCache(force) {\r\n        if (force) { //强力清除，后续不再使用\r\n            this.objectManager.cache = new NCache();\r\n            return;\r\n        }\r\n        //清理dom相关\r\n        this.objectManager.clearSaveDoms();\r\n        //清理指令\r\n        this.objectManager.clearDirectives();\r\n        //清理表达式\r\n        this.objectManager.clearExpressions();\r\n        //清理事件\r\n        this.objectManager.clearEvents();\r\n        //清理css url\r\n        CssManager.clearModuleRules(this);\r\n    }\r\n    /**\r\n     * 获取node\r\n     * @param key   dom key\r\n     * @returns     html node\r\n     */\r\n    getNode(key) {\r\n        return this.keyNodeMap.get(key);\r\n    }\r\n    /**\r\n     * save node\r\n     * @param key   dom key\r\n     * @param node  html node\r\n     */\r\n    saveNode(key, node) {\r\n        this.keyNodeMap.set(key, node);\r\n    }\r\n}\r\n//# sourceMappingURL=module.js.map","references":["D:/User_zhao/gitRepository/competition/nodom/core/cache.ts","D:/User_zhao/gitRepository/competition/nodom/core/compiler.ts","D:/User_zhao/gitRepository/competition/nodom/core/cssmanager.ts","D:/User_zhao/gitRepository/competition/nodom/core/virtualdom.ts","D:/User_zhao/gitRepository/competition/nodom/core/model.ts","D:/User_zhao/gitRepository/competition/nodom/core/modulefactory.ts","D:/User_zhao/gitRepository/competition/nodom/core/objectmanager.ts","D:/User_zhao/gitRepository/competition/nodom/core/renderer.ts","D:/User_zhao/gitRepository/competition/nodom/core/util.ts","D:/User_zhao/gitRepository/competition/nodom/core/difftool.ts","D:/User_zhao/gitRepository/competition/nodom/core/modelmanager.ts"],"map":"{\"version\":3,\"file\":\"module.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/module.ts\"],\"names\":[],\"mappings\":\"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\"}"}
