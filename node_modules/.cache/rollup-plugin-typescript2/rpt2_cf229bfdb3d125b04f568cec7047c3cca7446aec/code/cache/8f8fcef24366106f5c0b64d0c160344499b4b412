{"code":"import { __awaiter } from \"tslib\";\r\nimport { ModuleFactory } from \"./modulefactory\";\r\nimport { Route } from \"./route\";\r\nimport { Util } from \"./util\";\r\n/**\r\n * 路由管理类\r\n * @since \t1.0\r\n */\r\nexport class Router {\r\n    /**\r\n     * 把路径加入跳转列表(准备跳往该路由)\r\n     * @param path \t路径\r\n     */\r\n    static go(path) {\r\n        //相同路径不加入\r\n        if (path === this.currentPath) {\r\n            return;\r\n        }\r\n        //添加路径到等待列表，已存在，不加入\r\n        if (this.waitList.indexOf(path) === -1) {\r\n            this.waitList.push(path);\r\n        }\r\n        //延迟加载，避免同一个路径多次加入\r\n        setTimeout(() => {\r\n            this.load();\r\n        }, 0);\r\n    }\r\n    /**\r\n     * 启动加载\r\n     */\r\n    static load() {\r\n        //在加载，或无等待列表，则返回\r\n        if (this.waitList.length === 0) {\r\n            return;\r\n        }\r\n        let path = this.waitList.shift();\r\n        this.start(path).then(() => {\r\n            //继续加载\r\n            this.load();\r\n        });\r\n    }\r\n    /**\r\n     * 切换路由\r\n     * @param path \t路径\r\n     */\r\n    static start(path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let diff = this.compare(this.currentPath, path);\r\n            // 当前路由依赖的容器模块\r\n            let parentModule;\r\n            if (diff[0] === null) {\r\n                parentModule = ModuleFactory.getMain();\r\n            }\r\n            else {\r\n                parentModule = yield this.getModule(diff[0]);\r\n            }\r\n            //onleave事件，从末往前执行\r\n            for (let i = diff[1].length - 1; i >= 0; i--) {\r\n                const r = diff[1][i];\r\n                if (!r.module) {\r\n                    continue;\r\n                }\r\n                let module = yield this.getModule(r);\r\n                if (Util.isFunction(this.onDefaultLeave)) {\r\n                    this.onDefaultLeave(module.model);\r\n                }\r\n                if (Util.isFunction(r.onLeave)) {\r\n                    r.onLeave(module.model);\r\n                }\r\n                // 清理map映射\r\n                this.activeFieldMap.delete(module.id);\r\n                //module置为不激活\r\n                module.unactive();\r\n            }\r\n            if (diff[2].length === 0) { //路由相同，参数不同\r\n                let route = diff[0];\r\n                if (route !== null) {\r\n                    let module = yield this.getModule(route);\r\n                    // 模块处理\r\n                    this.dependHandle(module, route, diff[3] ? diff[3].module : null);\r\n                }\r\n            }\r\n            else { //路由不同\r\n                //加载模块\r\n                for (let ii = 0; ii < diff[2].length; ii++) {\r\n                    let route = diff[2][ii];\r\n                    //路由不存在或路由没有模块（空路由）\r\n                    if (!route || !route.module) {\r\n                        continue;\r\n                    }\r\n                    let module = yield this.getModule(route);\r\n                    // 模块处理\r\n                    this.dependHandle(module, route, parentModule);\r\n                    //默认全局路由enter事件\r\n                    if (Util.isFunction(this.onDefaultEnter)) {\r\n                        this.onDefaultEnter(module.model);\r\n                    }\r\n                    //当前路由进入事件\r\n                    if (Util.isFunction(route.onEnter)) {\r\n                        route.onEnter(module.model);\r\n                    }\r\n                    parentModule = module;\r\n                }\r\n            }\r\n            //如果是history popstate，则不加入history\r\n            if (this.startStyle === 0) {\r\n                //子路由，替换state\r\n                if (path.startsWith(this.currentPath)) {\r\n                    history.replaceState(path, '', path);\r\n                }\r\n                else { //路径push进history\r\n                    history.pushState(path, '', path);\r\n                }\r\n            }\r\n            //修改currentPath\r\n            this.currentPath = path;\r\n            //设置start类型为正常start\r\n            this.startStyle = 0;\r\n        });\r\n    }\r\n    /*\r\n     * 重定向\r\n     * @param path \t路径\r\n     */\r\n    static redirect(path) {\r\n        this.go(path);\r\n    }\r\n    /**\r\n     * 获取module\r\n     * @param route 路由对象\r\n     * @returns     路由对应模块\r\n     */\r\n    static getModule(route) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let module = route.module;\r\n            //已经是模块实例\r\n            if (typeof module === 'object') {\r\n                return module;\r\n            }\r\n            //延迟加载\r\n            if (typeof module === 'string' && route.modulePath) { //模块路径\r\n                module = yield import(route.modulePath);\r\n                module = module[route.module];\r\n            }\r\n            //模块类\r\n            if (typeof module === 'function') {\r\n                module = ModuleFactory.get(module);\r\n            }\r\n            route.module = module;\r\n            return module;\r\n        });\r\n    }\r\n    /**\r\n     * 比较两个路径对应的路由链\r\n     * @param path1 \t第一个路径\r\n     * @param path2 \t第二个路径\r\n     * @returns \t\t数组 [父路由或不同参数的路由，第一个需要销毁的路由数组，第二个需要增加的路由数组，不同参数路由的父路由]\r\n     */\r\n    static compare(path1, path2) {\r\n        // 获取路由id数组\r\n        let arr1 = null;\r\n        let arr2 = null;\r\n        if (path1) {\r\n            //采用克隆方式复制，避免被第二个路径返回的路由覆盖参数\r\n            arr1 = this.getRouteList(path1, true);\r\n        }\r\n        if (path2) {\r\n            arr2 = this.getRouteList(path2);\r\n        }\r\n        let len = 0;\r\n        if (arr1 !== null) {\r\n            len = arr1.length;\r\n        }\r\n        if (arr2 !== null) {\r\n            if (arr2.length < len) {\r\n                len = arr2.length;\r\n            }\r\n        }\r\n        else {\r\n            len = 0;\r\n        }\r\n        //需要销毁的旧路由数组\r\n        let retArr1 = [];\r\n        //需要加入的新路由数组\r\n        let retArr2 = [];\r\n        let i = 0;\r\n        for (i = 0; i < len; i++) {\r\n            //找到不同路由开始位置\r\n            if (arr1[i].id === arr2[i].id) {\r\n                //比较参数\r\n                if (JSON.stringify(arr1[i].data) !== JSON.stringify(arr2[i].data)) {\r\n                    i++;\r\n                    break;\r\n                }\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        //旧路由改变数组\r\n        if (arr1 !== null) {\r\n            retArr1 = arr1.slice(i);\r\n        }\r\n        //新路由改变数组（相对于旧路由）\r\n        if (arr2 !== null) {\r\n            retArr2 = arr2.slice(i);\r\n        }\r\n        //上一级路由或参数不同的当前路由\r\n        let p1 = null;\r\n        //上二级路由或参数不同路由的上一级路由\r\n        let p2 = null;\r\n        if (arr2 && i > 0) {\r\n            // 可能存在空路由，需要向前遍历\r\n            for (let j = i - 1; j >= 0; j--) {\r\n                if (!p1) {\r\n                    if (arr2[j].module) {\r\n                        p1 = arr2[j];\r\n                        continue;\r\n                    }\r\n                }\r\n                else if (!p2) {\r\n                    if (arr2[j].module) {\r\n                        p2 = arr2[j];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return [p1, retArr1, retArr2, p2];\r\n    }\r\n    /**\r\n     * 添加激活字段\r\n     * @param module    模块\r\n     * @param path      路由路径\r\n     * @param model     激活字段所在model\r\n     * @param field     字段名\r\n     */\r\n    static addActiveField(module, path, model, field) {\r\n        if (!model || !field) {\r\n            return;\r\n        }\r\n        let arr = Router.activeFieldMap.get(module.id);\r\n        if (!arr) { //尚未存在，新建\r\n            Router.activeFieldMap.set(module.id, [{ path: path, model: model, field: field }]);\r\n        }\r\n        else if (arr.find(item => item.model === model && item.field === field) === undefined) { //不重复添加\r\n            arr.push({ path: path, model: model, field: field });\r\n        }\r\n    }\r\n    /**\r\n     * 依赖模块相关处理\r\n     * @param module \t模块\r\n     * @param pm        依赖模块\r\n     * @param path \t\tview对应的route路径\r\n     */\r\n    static dependHandle(module, route, pm) {\r\n        const me = this;\r\n        //激活\r\n        module.active();\r\n        //设置参数\r\n        let o = {\r\n            path: route.path\r\n        };\r\n        if (!Util.isEmpty(route.data)) {\r\n            o['data'] = route.data;\r\n        }\r\n        module.model['$route'] = o;\r\n        if (pm) {\r\n            if (pm.state === 2) { //被依赖模块处于渲染后状态\r\n                module.setContainer(pm.getNode(Router.routerKeyMap.get(pm.id)));\r\n                this.setDomActive(pm, route.fullPath);\r\n            }\r\n            else { //被依赖模块不处于被渲染后状态\r\n                pm.addRenderOps(function (m, p) {\r\n                    module.setContainer(m.getNode(Router.routerKeyMap.get(m.id)));\r\n                    me.setDomActive(m, p);\r\n                }, 1, [pm, route.fullPath], true);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 设置路由元素激活属性\r\n     * @param module    模块\r\n     * @param path      路径\r\n     * @returns\r\n     */\r\n    static setDomActive(module, path) {\r\n        let arr = Router.activeFieldMap.get(module.id);\r\n        if (!arr) {\r\n            return;\r\n        }\r\n        for (let o of arr) {\r\n            o.model[o.field] = o.path === path;\r\n        }\r\n    }\r\n    /**\r\n     * 添加路由\r\n     * @param route \t路由配置\r\n     * @param parent \t父路由\r\n     */\r\n    static addRoute(route, parent) {\r\n        //建立根(空路由)\r\n        if (!this.root) {\r\n            this.root = new Route();\r\n        }\r\n        let pathArr = route.path.split('/');\r\n        let node = parent || this.root;\r\n        let param = [];\r\n        let paramIndex = -1; //最后一个参数开始\r\n        let prePath = ''; //前置路径\r\n        for (let i = 0; i < pathArr.length; i++) {\r\n            let v = pathArr[i].trim();\r\n            if (v === '') {\r\n                pathArr.splice(i--, 1);\r\n                continue;\r\n            }\r\n            if (v.startsWith(':')) { //参数\r\n                if (param.length === 0) {\r\n                    paramIndex = i;\r\n                }\r\n                param.push(v.substr(1));\r\n            }\r\n            else {\r\n                paramIndex = -1;\r\n                param = []; //上级路由的参数清空\r\n                route.path = v; //暂存path\r\n                let j = 0;\r\n                for (; j < node.children.length; j++) {\r\n                    let r = node.children[j];\r\n                    if (r.path === v) {\r\n                        node = r;\r\n                        break;\r\n                    }\r\n                }\r\n                //没找到，创建新节点\r\n                if (j === node.children.length) {\r\n                    if (prePath !== '') {\r\n                        new Route({ path: prePath, parent: node });\r\n                        node = node.children[node.children.length - 1];\r\n                    }\r\n                    prePath = v;\r\n                }\r\n            }\r\n            //不存在参数\r\n            if (paramIndex === -1) {\r\n                route.params = [];\r\n            }\r\n            else {\r\n                route.params = param;\r\n            }\r\n        }\r\n        //添加到树\r\n        if (node !== undefined && node !== route) {\r\n            route.path = prePath;\r\n            node.addChild(route);\r\n        }\r\n        // 添加到路由map    \r\n        this.routeMap.set(route.id, route);\r\n    }\r\n    /**\r\n     * 获取路由数组\r\n     * @param path \t要解析的路径\r\n     * @param clone 是否clone，如果为false，则返回路由树的路由对象，否则返回克隆对象\r\n     * @returns     路由对象数组\r\n     */\r\n    static getRouteList(path, clone) {\r\n        if (!this.root) {\r\n            return [];\r\n        }\r\n        let pathArr = path.split('/');\r\n        let node = this.root;\r\n        let paramIndex = 0; //参数索引\r\n        let retArr = [];\r\n        let fullPath = ''; //完整路径\r\n        let preNode = this.root; //前一个节点\r\n        for (let i = 0; i < pathArr.length; i++) {\r\n            let v = pathArr[i].trim();\r\n            if (v === '') {\r\n                continue;\r\n            }\r\n            let find = false;\r\n            for (let j = 0; j < node.children.length; j++) {\r\n                if (node.children[j].path === v) {\r\n                    //设置完整路径\r\n                    if (preNode !== this.root) {\r\n                        preNode.fullPath = fullPath;\r\n                        preNode.data = node.data;\r\n                        retArr.push(preNode);\r\n                    }\r\n                    //设置新的查找节点\r\n                    node = clone ? node.children[j].clone() : node.children[j];\r\n                    //参数清空\r\n                    node.data = {};\r\n                    preNode = node;\r\n                    find = true;\r\n                    //参数索引置0\r\n                    paramIndex = 0;\r\n                    break;\r\n                }\r\n            }\r\n            //路径叠加\r\n            fullPath += '/' + v;\r\n            //不是孩子节点,作为参数\r\n            if (!find) {\r\n                if (paramIndex < node.params.length) { //超出参数长度的废弃\r\n                    node.data[node.params[paramIndex++]] = v;\r\n                }\r\n            }\r\n        }\r\n        //最后一个节点\r\n        if (node !== this.root) {\r\n            node.fullPath = fullPath;\r\n            retArr.push(node);\r\n        }\r\n        return retArr;\r\n    }\r\n}\r\n/**\r\n * 路由map\r\n */\r\nRouter.routeMap = new Map();\r\n/**\r\n * path等待链表\r\n */\r\nRouter.waitList = [];\r\n/**\r\n * 启动方式 0:直接启动 1:popstate 启动\r\n */\r\nRouter.startStyle = 0;\r\n/**\r\n * 激活Dom map，格式为{moduleId:[]}\r\n */\r\nRouter.activeFieldMap = new Map();\r\n/**\r\n * 绑定到module的router指令对应的key，即router容器对应的key，格式为 {moduleId:routerKey,...}\r\n */\r\nRouter.routerKeyMap = new Map();\r\n//处理popstate事件\r\nwindow.addEventListener('popstate', function (e) {\r\n    //根据state切换module\r\n    const state = history.state;\r\n    if (!state) {\r\n        return;\r\n    }\r\n    Router.startStyle = 1;\r\n    Router.go(state);\r\n});\r\n//# sourceMappingURL=router.js.map","references":["D:/User_zhao/gitRepository/competition/nodom/core/module.ts","D:/User_zhao/gitRepository/competition/nodom/core/modulefactory.ts","D:/User_zhao/gitRepository/competition/nodom/core/renderer.ts","D:/User_zhao/gitRepository/competition/nodom/core/route.ts","D:/User_zhao/gitRepository/competition/nodom/core/util.ts"],"map":"{\"version\":3,\"file\":\"router.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/router.ts\"],\"names\":[],\"mappings\":\"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\"}"}
