{"code":"import { NEvent } from \"./event\";\r\n/**\r\n * 事件管理器\r\n */\r\nexport class EventManager {\r\n    /**\r\n     * 绑定事件\r\n     * @param module\r\n     * @param dom\r\n     */\r\n    static bind(module, dom) {\r\n        if (!dom.events) {\r\n            return;\r\n        }\r\n        //判断并设置事件绑定标志\r\n        let el = module.getNode(dom.key);\r\n        if (el['bindEvent']) {\r\n            return;\r\n        }\r\n        el['bindEvent'] = true;\r\n        for (let evt of dom.events) {\r\n            let arr = evt[1];\r\n            //同一个事件名可能对应多个事件对象\r\n            if (arr.length === 0)\r\n                return;\r\n            //获取usecapture\r\n            let capture = (arr.findIndex(item => module.objectManager.getEvent(item).capture === true) !== -1);\r\n            // 只代理一次，也只绑定一次\r\n            //是否已代理\r\n            let hasDelg = false;\r\n            //是否已绑定\r\n            let hasBound = false;\r\n            //遍历处理代理事件\r\n            for (let ii = 0; ii < arr.length; ii++) {\r\n                const ev = module.objectManager.getEvent(arr[ii]);\r\n                //处理外部事件，如果有外部事件，则移除改事件\r\n                if (this.handleExtendEvent(module, dom, ev)) {\r\n                    arr.splice(ii--, 1);\r\n                    continue;\r\n                }\r\n                //当前事件名已绑定且已代理，不再执行\r\n                if (hasBound && hasDelg) {\r\n                    break;\r\n                }\r\n                //代理事件\r\n                if (ev.delg) {\r\n                    if (!hasDelg) {\r\n                        const parent = dom.parent;\r\n                        //事件加入父对象\r\n                        parent.addEvent(ev);\r\n                        // 保存代理dom信息\r\n                        let delgs = ev.getParam(module, parent, '$delgs');\r\n                        if (!delgs) {\r\n                            delgs = {};\r\n                            ev.setParam(module, parent, '$delgs', delgs);\r\n                        }\r\n                        delgs[dom.key] = dom;\r\n                        //从本地移除\r\n                        arr.splice(ii--, 1);\r\n                        //如果父无此事件，则需要绑定到父事件\r\n                        let eh = getCfg(parent, ev.name);\r\n                        if (!eh) {\r\n                            // 保存handler\r\n                            saveCfg(parent, ev.name, handler, ev.capture);\r\n                            module.getNode(parent.key).addEventListener(ev.name, handler, ev.capture);\r\n                        }\r\n                        hasDelg = true;\r\n                    }\r\n                }\r\n                else if (!hasBound) {\r\n                    hasBound = true;\r\n                    // 保存handler\r\n                    saveCfg(dom, ev.name, handler, capture);\r\n                    el.addEventListener(ev.name, handler, capture);\r\n                }\r\n            }\r\n        }\r\n        /**\r\n         * 保存事件配置\r\n         * @param dom       dom节点\r\n         * @param ev        事件名\r\n         * @param handler   事件方法\r\n         * @param capture   是否capture\r\n         */\r\n        function saveCfg(dom, ev, handler, capture) {\r\n            module.objectManager.set('$domevents_' + dom.key + '_' + ev, {\r\n                handler: handler,\r\n                capture: capture\r\n            });\r\n        }\r\n        /**\r\n         * 获取事件配置\r\n         * @param dom       dom节点\r\n         * @param ev        事件名\r\n         * @returns         {handler,capture}\r\n         */\r\n        function getCfg(dom, ev) {\r\n            return module.objectManager.get('$domevents_' + dom.key + '_' + ev);\r\n        }\r\n        /**\r\n         * 事件handler\r\n         * @param e  Event\r\n         */\r\n        function handler(e) {\r\n            //从事件element获取事件\r\n            let el = e.currentTarget;\r\n            const dom = el['vdom'];\r\n            if (!dom || !dom.events || !dom.events.has(e.type)) {\r\n                return;\r\n            }\r\n            const evts = dom.getEvent(e.type);\r\n            //已执行事件map，不重复执行\r\n            let execMap = new Map();\r\n            for (let ii = 0; ii < evts.length; ii++) {\r\n                const eid = evts[ii];\r\n                const ev = module.objectManager.getEvent(eid);\r\n                if (typeof ev.handler === 'string') {\r\n                    ev.handler = module.getMethod(ev.handler);\r\n                }\r\n                if (!ev.handler) {\r\n                    return;\r\n                }\r\n                //禁止冒泡\r\n                if (ev.nopopo) {\r\n                    e.stopPropagation();\r\n                }\r\n                //代理事件，需要作用在子节点上\r\n                if (ev.delg) { // 代理\r\n                    let delgs = ev.getParam(module, dom, '$delgs');\r\n                    //向上找节点\r\n                    for (let i = 0; i < e.path.length && e.path[i] !== el; i++) {\r\n                        let el1 = e.path[i];\r\n                        let key = el1.vdom.key;\r\n                        //　找到事件节点\r\n                        if (key && delgs.hasOwnProperty(key)) {\r\n                            let dom1 = delgs[key];\r\n                            if (dom1) {\r\n                                //如果dom对应的事件已执行，不再执行\r\n                                if (execMap.get(ev.id) === dom1.key) {\r\n                                    break;\r\n                                }\r\n                                ev.handler.apply(module, [dom1.model, dom1, ev, e]);\r\n                                execMap.set(ev.id, dom1.key);\r\n                                if (ev.once) {\r\n                                    EventManager.unbind(module, dom1, ev);\r\n                                }\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    ev.handler.apply(module, [dom.model, dom, ev, e]);\r\n                    //事件只执行一次，从事件数组删除\r\n                    if (ev.once) {\r\n                        EventManager.unbind(module, dom, ev);\r\n                        ii--;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 解绑一个事件\r\n     * @param module    模块\r\n     * @param dom       dom节点\r\n     * @param ev        事件对象\r\n     * @returns\r\n     */\r\n    static unbind(module, dom, ev) {\r\n        let evts;\r\n        if (ev.delg) {\r\n            evts = dom.parent.getEvent(ev.name);\r\n            let delgs = ev.getParam(module, dom.parent, '$delgs');\r\n            delete delgs[dom.key];\r\n            //如果代理不为空，则不删除事件\r\n            if (Object.keys(delgs).length > 0) {\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            evts = dom.getEvent(ev.name);\r\n        }\r\n        if (!evts) {\r\n            return;\r\n        }\r\n        let index;\r\n        if ((index = evts.findIndex(item => item === ev.id)) === -1)\r\n            return;\r\n        //从事件数组移除\r\n        evts.splice(index, 1);\r\n        //判断并解绑\r\n        if (evts.length === 0) {\r\n            const cfg = module.objectManager.get('$domevents_' + dom.key + '_' + ev.name);\r\n            if (cfg && cfg.handler) {\r\n                dom.getEl(module).removeEventListener(ev.name, cfg.handler, cfg.capture);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 处理外部事件\r\n     * @param module    模块\r\n     * @param dom       dom节点\r\n     * @param event     事件对象\r\n     * @returns         如果有是外部事件，则返回true，否则返回false\r\n     */\r\n    static handleExtendEvent(module, dom, event) {\r\n        let evts = this.get(event.name);\r\n        if (!evts) {\r\n            return false;\r\n        }\r\n        for (let key of Object.keys(evts)) {\r\n            let ev = new NEvent(key, evts[key]);\r\n            ev.capture = event.capture;\r\n            ev.nopopo = event.nopopo;\r\n            ev.delg = event.delg;\r\n            ev.once = event.once;\r\n            //设置依赖事件\r\n            ev.dependEvent = event;\r\n            dom.addEvent(ev);\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * 注册扩展事件\r\n     * @param eventName    事件名\r\n     * @param handleObj    事件处理集\r\n     */\r\n    static regist(eventName, handleObj) {\r\n        this.extendEventMap.set(eventName, handleObj);\r\n    }\r\n    /**\r\n     * 取消注册扩展事件\r\n     * @param eventName     事件名\r\n     */\r\n    static unregist(eventName) {\r\n        return this.extendEventMap.delete(eventName);\r\n    }\r\n    /**\r\n     * 获取扩展事件\r\n     * @param eventName     事件名\r\n     * @returns             事件处理集\r\n     */\r\n    static get(eventName) {\r\n        return this.extendEventMap.get(eventName);\r\n    }\r\n}\r\n/**\r\n * 外部事件集\r\n */\r\nEventManager.extendEventMap = new Map();\r\n//# sourceMappingURL=eventmanager.js.map","references":["D:/User_zhao/gitRepository/competition/nodom/core/module.ts","D:/User_zhao/gitRepository/competition/nodom/core/virtualdom.ts","D:/User_zhao/gitRepository/competition/nodom/core/event.ts","D:/User_zhao/gitRepository/competition/nodom/core/util.ts"],"map":"{\"version\":3,\"file\":\"eventmanager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/eventmanager.ts\"],\"names\":[],\"mappings\":\"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\"}"}
