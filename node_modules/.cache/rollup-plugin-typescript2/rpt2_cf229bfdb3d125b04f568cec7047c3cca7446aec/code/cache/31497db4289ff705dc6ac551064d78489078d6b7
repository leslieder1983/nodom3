{"code":"import { DirectiveElementManager } from \"./directiveelementmanager\";\r\nimport { Directive } from \"./directive\";\r\nimport { VirtualDom } from \"./virtualdom\";\r\nimport { NError } from \"./error\";\r\nimport { NEvent } from \"./event\";\r\nimport { Expression } from \"./expression\";\r\nimport { ModuleFactory } from \"./modulefactory\";\r\nexport class Compiler {\r\n    /**\r\n     * 构造器\r\n     * @param module\r\n     */\r\n    constructor(module) {\r\n        this.elementId = 0;\r\n        this.module = module;\r\n    }\r\n    /**\r\n    * 编译\r\n    * @param elementStr     待编译html串\r\n    * @returns              虚拟dom\r\n    */\r\n    compile(elementStr) {\r\n        return this.compileTemplate(elementStr);\r\n    }\r\n    /**\r\n     * 编译模版串\r\n     * @param srcStr    源串\r\n     * @returns\r\n     */\r\n    compileTemplate(srcStr) {\r\n        // 清理comment\r\n        let regExp = /\\<\\!\\-\\-[\\s\\S]*?\\-\\-\\>/g;\r\n        srcStr = srcStr.replace(regExp, '');\r\n        //不可见字符正则式\r\n        const regSpace = /^[\\s\\n\\r\\t\\v]+$/;\r\n        // 1 识别标签\r\n        regExp = /(?<!{{[^}}]*)(?:<(\\/?)\\s*?([a-zA-Z][a-zA-Z0-9-_]*)([\\s\\S]*?)(\\/?)(?<!=)>)(?![^{{]*}})/g;\r\n        let st = 0;\r\n        //标签串数组,含开始和结束标签\r\n        let tagStack = [];\r\n        //独立文本串数组，对应需要的标签串前面\r\n        let textStack = [];\r\n        //pre标签标志\r\n        let isPreTag = false;\r\n        let r;\r\n        while ((r = regExp.exec(srcStr)) !== null) {\r\n            tagStack.push(r[0]);\r\n            //处理标签之间的文本\r\n            let tmp = '';\r\n            if (st < r.index - 1) {\r\n                tmp = srcStr.substring(st, r.index);\r\n                //全为不可见字符，则保存空字符串\r\n                if (!isPreTag && regSpace.test(tmp)) {\r\n                    tmp = '';\r\n                }\r\n            }\r\n            textStack.push(tmp);\r\n            st = regExp.lastIndex;\r\n        }\r\n        // 标签名数组\r\n        let tagNames = [];\r\n        // 标签对象数组\r\n        let tagObjs = [];\r\n        // 根节点\r\n        let root;\r\n        tagStack.forEach((tag, ii) => {\r\n            //开始标签名\r\n            let stg;\r\n            if (tag.startsWith('</')) { //结束标签\r\n                let etg = tag.substring(2, tag.length - 1).trim();\r\n                let chds = [];\r\n                //找到对应此结束标签的开始标签\r\n                for (let i = ii; tagNames.length > 0; i--) {\r\n                    // 结束标签前面的非空文本节点作为孩子\r\n                    if (i >= 0 && textStack[i] !== '') {\r\n                        chds.push(this.handleText(textStack[i]));\r\n                        // 文本已使用，置为空\r\n                        textStack[i] = '';\r\n                    }\r\n                    if ((stg = tagNames.pop()) === etg) {\r\n                        break;\r\n                    }\r\n                    //当前节点及其子节点同时作为孩子节点\r\n                    let tobj = tagObjs.pop();\r\n                    chds = (tobj.children || []).concat(chds);\r\n                    chds.unshift(tobj);\r\n                }\r\n                //找到节点\r\n                if (stg === etg) {\r\n                    // 添加到父节点\r\n                    let po = tagObjs.pop();\r\n                    po.children = (po.children || []).concat(chds);\r\n                    this.handleSlot(po);\r\n                    if (tagObjs.length > 0) {\r\n                        tagObjs[tagObjs.length - 1].add(po);\r\n                    }\r\n                    if (isPreTag && etg === 'pre') {\r\n                        isPreTag = false;\r\n                    }\r\n                }\r\n                else {\r\n                    throw new NError('wrongTemplate');\r\n                }\r\n            }\r\n            else { //标签头\r\n                //去掉标签前后< >\r\n                let tmpS = tag.endsWith('\\/>') ? tag.substring(1, tag.length - 2) : tag.substring(1, tag.length - 1);\r\n                //处理标签头，返回dom节点和原始标签名\r\n                const [dom, tagName] = this.handleTag(tmpS.trim());\r\n                //设置pre标签标志\r\n                if (tagName === 'pre') {\r\n                    isPreTag = true;\r\n                }\r\n                //前一个文本节点存在，则作为前一个节点的孩子\r\n                if (ii > 0 && textStack[ii] !== '') {\r\n                    tagObjs[tagObjs.length - 1].add(this.handleText(textStack[ii]));\r\n                    textStack[ii] = '';\r\n                }\r\n                if (!tag.endsWith('\\/>')) { // 非自闭合\r\n                    //标签头入栈\r\n                    tagNames.push(tagName);\r\n                    tagObjs.push(dom);\r\n                }\r\n                else { //自闭合，直接作为前一个的孩子节点\r\n                    if (tagObjs.length > 0) {\r\n                        if (tagObjs[tagObjs.length - 1].children) {\r\n                            tagObjs[tagObjs.length - 1].children.push(dom);\r\n                        }\r\n                        else {\r\n                            tagObjs[tagObjs.length - 1].children = [dom];\r\n                        }\r\n                    }\r\n                }\r\n                //设置根节点\r\n                if (!root) {\r\n                    root = dom;\r\n                }\r\n            }\r\n        });\r\n        if (tagNames.length > 0) {\r\n            throw new NError('wrongTempate');\r\n        }\r\n        return root;\r\n    }\r\n    /**\r\n     * 处理标签属性\r\n     * @param tagStr    标签串\r\n     * @returns         [虚拟dom节点,原始标签名]\r\n     */\r\n    handleTag(tagStr) {\r\n        const me = this;\r\n        let ele;\r\n        //字符串和表达式替换\r\n        const reg = /('[\\s\\S]*?')|(\"[\\s\\S]*?\")|(`[\\s\\S]*?`)|({{[\\S\\s]*?\\}{0,2}\\s*}})|([\\w$-]+(\\s*=)?)/g;\r\n        let pName;\r\n        //标签原始名\r\n        let tagName;\r\n        let startValue;\r\n        let r;\r\n        let allModelField = true;\r\n        //属性名正则式\r\n        const regName = /[a-zA-Z$_]\\S*/;\r\n        while ((r = reg.exec(tagStr)) !== null) {\r\n            let s = r[0];\r\n            if (regName.test(s)) { //属性名\r\n                if (!tagName) {\r\n                    tagName = s;\r\n                    ele = new VirtualDom(tagName, me.genKey());\r\n                }\r\n                else if (s.endsWith('=')) { //带等号\r\n                    if (pName) { //前一个属性名存在，设置空值\r\n                        setValue();\r\n                    }\r\n                    pName = s.substring(0, s.length - 1).trim();\r\n                    startValue = true;\r\n                }\r\n                else if (!pName) { //不带等号\r\n                    pName = s;\r\n                }\r\n                else if (startValue) { //属性名存在，设置属性值\r\n                    setValue(s);\r\n                }\r\n            }\r\n            else { //属性值\r\n                if (pName && startValue) {\r\n                    setValue(s);\r\n                }\r\n            }\r\n        }\r\n        //存在空属性\r\n        if (pName) {\r\n            setValue();\r\n        }\r\n        //后置处理\r\n        this.postHandleNode(ele);\r\n        ele.sortDirective();\r\n        ele.allModelField = allModelField;\r\n        return [ele, tagName];\r\n        /**\r\n         * 设置属性值\r\n         * @param value     属性值\r\n         */\r\n        function setValue(value) {\r\n            if (value) {\r\n                let r;\r\n                //去掉字符串两端\r\n                if (((r = /((?<=^')(.*?)(?='$))|((?<=^\")(.*?)(?=\"$)|((?<=^`)(.*?)(?=`$)))/.exec(value)) !== null)) {\r\n                    value = r[0].trim();\r\n                }\r\n                //表达式编译\r\n                if (/^\\{\\{[\\S\\s]*\\}\\}$/.test(value)) {\r\n                    value = me.compileExpression(value, ele)[0];\r\n                    allModelField = value.allModelField;\r\n                }\r\n            }\r\n            //指令\r\n            if (pName.startsWith(\"x-\")) {\r\n                //不排序\r\n                ele.addDirective(new Directive(pName.substr(2), value));\r\n            }\r\n            else if (pName.startsWith(\"e-\")) { //事件\r\n                ele.addEvent(new NEvent(pName.substr(2), value));\r\n            }\r\n            else { //普通属性\r\n                ele.setProp(pName, value);\r\n            }\r\n            pName = undefined;\r\n            startValue = false;\r\n        }\r\n    }\r\n    /**\r\n     * 处理模块子节点为slot节点\r\n     * @param dom   dom节点\r\n     */\r\n    handleSlot(dom) {\r\n        if (dom.hasDirective('module')) { //po为子模块，其所有子模块判断是否加上slot\r\n            let slotCt;\r\n            for (let j = 0; j < dom.children.length; j++) {\r\n                let c = dom.children[j];\r\n                if (c.hasDirective('slot')) { //带slot的不处理\r\n                    continue;\r\n                }\r\n                if (!slotCt) { //第一个直接被slotCt替换\r\n                    slotCt = new VirtualDom('div', this.genKey());\r\n                    slotCt.addDirective(new Directive('slot', null));\r\n                    //当前位置，用slot替代\r\n                    dom.children.splice(j, 1, slotCt);\r\n                }\r\n                else {\r\n                    //直接删除\r\n                    dom.children.splice(j--, 1);\r\n                }\r\n                slotCt.add(c);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 编译txt为文本节点\r\n     * @param txt 文本串\r\n     */\r\n    handleText(txt) {\r\n        let ele = new VirtualDom(null, this.genKey());\r\n        txt = this.preHandleText(txt);\r\n        if (/\\{\\{[\\s\\S]+\\}\\}/.test(txt)) { //检查是否含有表达式\r\n            ele.expressions = this.compileExpression(txt, ele);\r\n        }\r\n        else {\r\n            ele.textContent = txt;\r\n        }\r\n        return ele;\r\n    }\r\n    /**\r\n     * 处理表达式串\r\n     * @param exprStr   含表达式的串\r\n     * @return          处理后的字符串和表达式数组\r\n     */\r\n    compileExpression(exprStr, dom) {\r\n        if (!exprStr) {\r\n            return;\r\n        }\r\n        let reg = /\\{\\{[\\s\\S]+?\\}?\\s*\\}\\}/g;\r\n        let retA = new Array();\r\n        let re;\r\n        let oIndex = 0;\r\n        while ((re = reg.exec(exprStr)) !== null) {\r\n            let ind = re.index;\r\n            //字符串\r\n            if (ind > oIndex) {\r\n                let s = exprStr.substring(oIndex, ind);\r\n                retA.push(s);\r\n            }\r\n            //实例化表达式对象\r\n            let exp = new Expression(this.module, re[0].substring(2, re[0].length - 2));\r\n            dom.allModelField = exp.allModelField;\r\n            //加入数组\r\n            retA.push(exp);\r\n            oIndex = ind + re[0].length;\r\n        }\r\n        //最后的字符串\r\n        if (oIndex < exprStr.length - 1) {\r\n            retA.push(exprStr.substr(oIndex));\r\n        }\r\n        return retA;\r\n    }\r\n    /**\r\n     * 后置处理\r\n     * 包括：模块类元素、自定义元素\r\n     * @param node  虚拟dom节点\r\n     */\r\n    postHandleNode(node) {\r\n        // 模块类判断\r\n        if (ModuleFactory.hasClass(node.tagName)) {\r\n            node.addDirective(new Directive('module', node.tagName));\r\n            node.tagName = 'div';\r\n        }\r\n        else if (DirectiveElementManager.has(node.tagName)) { //自定义元素\r\n            let clazz = DirectiveElementManager.get(node.tagName);\r\n            Reflect.construct(clazz, [node, this.module]);\r\n        }\r\n    }\r\n    /**\r\n     * 预处理html保留字符 如 &nbsp;,&lt;等\r\n     * @param str   待处理的字符串\r\n     * @returns     解析之后的串\r\n     */\r\n    preHandleText(str) {\r\n        let reg = /&[a-z]+;/;\r\n        if (reg.test(str)) {\r\n            let div = document.createElement('div');\r\n            div.innerHTML = str;\r\n            return div.textContent;\r\n        }\r\n        return str;\r\n    }\r\n    /**\r\n     * 产生可以\r\n     * @returns     key\r\n     */\r\n    genKey() {\r\n        // return this.module.id + '_' + this.elementId++;\r\n        return this.elementId++ + '';\r\n    }\r\n}\r\n//# sourceMappingURL=compiler.js.map","references":["D:/User_zhao/gitRepository/competition/nodom/core/directiveelementmanager.ts","D:/User_zhao/gitRepository/competition/nodom/core/directive.ts","D:/User_zhao/gitRepository/competition/nodom/core/virtualdom.ts","D:/User_zhao/gitRepository/competition/nodom/core/error.ts","D:/User_zhao/gitRepository/competition/nodom/core/event.ts","D:/User_zhao/gitRepository/competition/nodom/core/expression.ts","D:/User_zhao/gitRepository/competition/nodom/core/module.ts","D:/User_zhao/gitRepository/competition/nodom/core/modulefactory.ts"],"map":"{\"version\":3,\"file\":\"compiler.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../core/compiler.ts\"],\"names\":[],\"mappings\":\"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\"}"}
